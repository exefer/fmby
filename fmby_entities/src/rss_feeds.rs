//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::RssFeedStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "rss_feeds")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub url: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub channel_id: i64,
    pub guild_id: i64,
    pub created_by: i64,
    pub created_at: DateTimeWithTimeZone,
    pub last_checked_at: DateTimeWithTimeZone,
    pub check_interval_minutes: i32,
    pub status: RssFeedStatus,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::rss_feed_entries::Entity")]
    RssFeedEntries,
}

impl Related<super::rss_feed_entries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssFeedEntries.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
