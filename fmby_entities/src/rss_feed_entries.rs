//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "rss_feed_entries")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub feed_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub entry_id: String,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub link: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub image_url: Option<String>,
    pub published_at: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub message_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::rss_feeds::Entity",
        from = "Column::FeedId",
        to = "super::rss_feeds::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    RssFeeds,
}

impl Related<super::rss_feeds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RssFeeds.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
